"use strict";const e=require("../../common/vendor.js"),n={computed:{uri(){const{protocol:e,host:n,port:o,endpoint:t}=this.connection;return`${e}://${n}:${o}${t}`}},data:()=>({connection:{protocol:"wxs",port:8084,host:"jqrjq.cn",endpoint:"/mqtt",clean:!0,connectTimeout:3e4,reconnectPeriod:4e3,clientId:"emqx_vue_"+Math.random().toString(16).substring(2,8),username:"emqx_test",password:"emqx_test",keep_alive:60},subscription:{topic:"envs",qos:0},publish:{topic:"topic/browser",qos:0,payload:'{ "msg": "Hello, I am browser." }'},receiveNews:"",qosList:[0,1,2],client:{connected:!1},subscribeSuccess:!1,connecting:!1,retryTimes:0,ssl:!1,connected:!1,msgs:[]}),methods:{initData(){this.client={connected:!1},this.retryTimes=0,this.connecting=!1,this.subscribeSuccess=!1},handleOnReConnect(){if(this.retryTimes+=1,this.retryTimes>5)try{this.client.end(),this.initData(),this.$message.error("Connection maxReconnectTimes limit, stop retry")}catch(e){this.$message.error(e.toString())}},createConnection(){try{this.connecting=!0;const{protocol:n,host:o,port:t,endpoint:c,...s}=this.connection,i=`${n}://${o}:${t}${c}`;this.client=e.mqtt.connect(i,s),this.client.on&&(this.client.on("connect",(()=>{this.connecting=!1,this.connected=!0,console.log("Connection succeeded!")})),this.client.on("reconnect",this.handleOnReConnect),this.client.on("error",(e=>{console.log("Connection failed",e)})),this.client.on("message",((e,n)=>{this.receiveNews=this.receiveNews.concat(n);const o=JSON.parse(n);this.msgs.push(o)})))}catch(n){this.connecting=!1,console.log("mqtt.connect error",n)}},destroyConnection(){if(this.client.connected)try{this.client.end(!1,(()=>{this.initData(),this.connected=!1,console.log("Successfully disconnected!")}))}catch(e){console.log("Disconnect failed",e.toString())}},doSubscribe(){const{topic:e,qos:n}=this.subscription;this.client.subscribe(e,{qos:n},((e,n)=>{e?console.log("Subscribe to topics error",e):(this.subscribeSuccess=!0,console.log("Subscribe to topics res",n))}))},doUnSubscribe(){const{topic:e}=this.subscription;this.client.unsubscribe(e,(e=>{e&&console.log("Unsubscribe error",e)}))},doPublish(){const{topic:e,qos:n,payload:o}=this.publish;this.client.publish(e,o,{qos:n},(e=>{e&&console.log("Publish error",e)}))},changeUrl:function(e){const{value:n}=e.detail;n.forEach((e=>{this.connection.port="SSL"==e?8084:8083,this.connection.protocol="SSL"==e?"wss":"ws"}))}}};const o=e._export_sfc(n,[["render",function(n,o,t,c,s,i){return e.e({a:s.connection.host,b:s.connection.port,c:s.connection.endpoint,d:s.connection.clientId,e:s.connection.username,f:s.connection.password,g:s.connection.keep_alive,h:s.subscription.topic,i:s.publish.topic,j:s.publish.payload,k:e.t(i.uri),l:e.o(((...e)=>i.changeUrl&&i.changeUrl(...e))),m:!s.connected},s.connected?{}:{n:e.o(((...e)=>i.createConnection&&i.createConnection(...e)))},{o:e.o(((...e)=>i.destroyConnection&&i.destroyConnection(...e))),p:!s.connected},(s.connected,{}),{q:e.o(((...e)=>i.doSubscribe&&i.doSubscribe(...e))),r:e.o(((...e)=>i.doUnSubscribe&&i.doUnSubscribe(...e))),s:e.f(s.msgs,((n,o,t)=>({a:e.t(n.name),b:e.t(n.msg)})))})}]]);wx.createPage(o);
